using System;
using System.Collections.Generic;
using System.IO;
using System.Security.Cryptography.X509Certificates;

namespace BundleWinCerts
{
    class Program
    {
        static Dictionary<string, X509Certificate2> certs = new Dictionary<string, X509Certificate2>();

        static void Main(string[] args)
        {
            //string ca_bundlePath = @"C:\Users\ChrisC\AppData\Local\GitHub\PortableGit_f02737a78695063deace08e96d5042710d3e32db\mingw32\ssl\certs\ca-bundle.crt";
            string ca_bundlePath = @"C:\Program Files\Git\mingw64\ssl\certs\ca-bundle.crt";
            ReadCABundle(ca_bundlePath);

            ReadCertStore();

            string newca_bundlePath = @"C:\Program Files\Git\mingw64\ssl\certs\ca-bundle-plusWinRoot.crt";
            WriteNewCABundle(newca_bundlePath);
        }

        static void ReadCABundle(string ca_bundlePath)
        {
            string[] lines = File.ReadAllLines(ca_bundlePath);

            string b64 = String.Empty;
            bool readingCert = false;

            foreach (string line in lines)
            {
                if (!readingCert)
                {
                    if (line.Contains("BEGIN CERTIFICATE")) //TODO:handle BEGIN CERTIFICATE without linebreak before b64 data
                    {
                        readingCert = true;
                    }
                }
                else
                {
                    if (line.Contains("END CERTIFICATE")) //TODO:handle END CERTIFICATE without linebreak after b64 data
                    {
                        readingCert = false;
                        ProcessCert(b64);
                        b64 = String.Empty;
                    }
                    else
                    {
                        b64 += (line);
                    }
                }
            }
        }

        static void ProcessCert(string b64)
        {
            byte[] raw = Convert.FromBase64String(b64);
            X509Certificate2 cert = new X509Certificate2();
            cert.Import(raw);
            //Console.WriteLine(cert.Subject);

            if (!certs.ContainsKey(cert.Thumbprint))
                certs.Add(cert.Thumbprint, cert);
        }

        static void ReadCertStore()
        {
            X509Store storeRoot = new X509Store(StoreName.Root, StoreLocation.LocalMachine);

            storeRoot.Open(OpenFlags.ReadOnly);

            foreach (X509Certificate2 cert in storeRoot.Certificates)
            {
                if (!certs.ContainsKey(cert.Thumbprint))
                    certs.Add(cert.Thumbprint, cert);
            }

            storeRoot.Close();

            X509Store storeInt = new X509Store(StoreName.CertificateAuthority, StoreLocation.LocalMachine);

            storeInt.Open(OpenFlags.ReadOnly);

            foreach (X509Certificate2 cert in storeInt.Certificates)
            {
                if (!certs.ContainsKey(cert.Thumbprint))
                    certs.Add(cert.Thumbprint, cert);
            }

            storeInt.Close();
        }

        static void WriteNewCABundle(string newca_bundlePath)
        {
            var type = X509ContentType.Cert;

            var header = new string[] {
                "##",
                "## This file is similar to the one auto-generated by GitHub Desktop.",
                "## Any changes made will be overwritten",
                "##",
                "## We will export all trusted certificate",
                "## authorities from the Windows certificate store to this file",
                "## as well as the default trusted cURL certificate authorities.",
                "##",
                "## File was last updated on: " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:sszzz"),
                "##",
            };

            File.WriteAllLines(newca_bundlePath, header);

            foreach (var cert in certs)
            {
                var data = new string[6];
                data[0] = String.Empty;
                data[1] = cert.Value.Subject;
                data[2] = new String('=', data[1].Length);
                data[3] = "-----BEGIN CERTIFICATE-----";
                data[4] = Convert.ToBase64String(cert.Value.Export(type), Base64FormattingOptions.InsertLineBreaks);
                data[5] = "-----END CERTIFICATE-----";

                File.AppendAllLines(newca_bundlePath, data);
            }
        }
    }
}
